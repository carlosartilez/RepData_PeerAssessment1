print Hello World!
q()
library(datasets)
data(iris)
?iris
head(iris)
iris
colMeans(iris)
rowMeans(iris[, 1:4])
tapply(iris[, 1:4], 1, mean)
lapply(iris[, 1:4], 1, mean)
vapply(iris[, 1:4], 1, mean)
lapply(iris[, 1:4], mean)
sapply(iris[, 1:4], mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], , mean)
apply(iris[, 1:4], 2, mean)
apply(iris[iris$Species == "virginica"], 2, mean)
apply(iris[iris$Species == virginica], 2, mean)
apply(iris[iris$Species == 'virginica'], 2, mean)
iris$Species == 'virginica'
iris$Species == "virginica"
apply(iris$Species == 'virginica', 2, mean)
mean(iris[iris$Species == 'virginica'])
mean(iris[iris$Species == "virginica"])
mean(iris[iris$Species])
tapply(iris$Sepal.Length, iris$Species, mean)
data("mtcars")
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
83-209
debug(ls)
apply(iris[, 1:4], 2, mean)
means <- apply(iris[, 1:4], 2, mean)
close
end
q
means
library(iris)
library(datasets)
data(iris)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(iris[, 1:4], 2, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
hp_means <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_means[1]-hp_means[3]
with(mtcars, tapply(mpg, cyl, mean))
?with
swirl()
swirl
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 10)
tail(plants, 1)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sampler
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), prob = c(0.3,0.7), replace = TRUE)
flips <- sample(c(0,1), 100, prob = c(0.3,0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl)
boxplot(formula = mpg ~ cyl)
boxplot(mtcars, mpg ~ cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
2006_micro_survey <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
micro_survey <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
head(micro_survey)
str(micro_survey)
library(dplyr)
install.packages("dplyr")
micro_survey <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
filter(micro_survey, VAL >= 1000000)
library(dplyr)
install.packages("dplyr")
library(dplyr)
package_version(dplyr)
install.packages("dplyr")
install.packages("C:/Users/carlo_000/AppData/Local/Temp/RtmpCYfl4C/downloaded_packages/dplyr_0.7.4.zip", repos = NULL, type = "win.binary")
install.packages(c("devtools", "digest", "openssl", "pillar", "rlang", "stringr"))
install.packages("C:/Users/carlo_000/AppData/Local/Temp/RtmpCYfl4C/downloaded_packages/dplyr_0.7.4.zip", repos = NULL, type = "win.binary")
library(dplyr)
install.packages("dplyr")
Sys.getenv("R_LIBS_USER")
install.packages("~/R/win-library/3.4/dplyr/libs/x64/dplyr.dll", repos = NULL)
install.packages("dplyr")
install.packages("swirl")
library(dplyr)
library(swirl)
library(dplyr)
install.packages("dplyr")
library(dplyr)
loadedNamespaces()
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(dplyr)
getwd()
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("C:/Users/carlo_000/AppData/Local/Temp/Rtmp0uCQzA/downloaded_packages/dplyr_0.7.4.zip", repos = NULL, type = "win.binary")
library(dplyr)
library(dplyr)
library(dplyr)
?dplyr
??dplyr
library(dplyr)
library(swirl)
install.packages("XLConnect")
install.packages("XLConnect")
install.packages("XLConnect")
install.packages(c("pillar", "yaml"))
install.packages("XLConnect")
install.packages(c("pillar", "yaml"))
install.packages(c("pillar", "yaml"))
install.packages(c("pillar", "yaml"))
install.packages("XLConnect")
library(XLConnect)
sessionInfo()
library(swirl)
library(dplyr)
sessionInfo()
microdata <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?`XLConnect-package`
dat <- loadWorkbook("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
dat <- loadWorkbook("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", create = TRUE)
head(dat)
rm(dat)
install.packages("xlsx")
library(xlsx)
?xlsx
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
f <- file.path(getwd(), "DATA.gov_NGAP.xlsx")
download.file(url, f, mode = "wb")
rows <- 18:23
cols <- 7:15
dat <- read.xlsx(f, 1, colIndex = cols, rowIndex = rows)
sum(dat$Zip * dat$Ext, na.rm = T)
install.packages("XML")
library(xml)
library(XML)
url <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlInternalTreeParse(url)
rootNode <- xmlRoot(doc)
names(rootNode)
names(rootNode[[1]][[1]])
zipcode <- xpathSApply(rootNode, "//zipcode", xmlValue)
table(zipcode == 21231)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
?fread
??fread
DT <- fread(f)
install.packages("data.table")
library(data.table)
DT <- fread(f)
head(DT)
check <- function(y, t) {
message(sprintf("Elapsed time: %.10f", t[3]))
print(y)
}
t <- system.time(y <- sapply(split(DT$pwgtp15, DT$SEX), mean))
check(y, t)
t <- system.time(y <- mean(DT$pwgtp15, by = DT$SEX))
check(y, t)
t <- system.time(y <- DT[, mean(pwgtp15), by = SEX])
check(y, t)
t <- system.time(y <- rowMeans(DT)[DT$SEX == 1]) + system.time(rowMeans(DT)[DT$SEX ==
2])
check(y, t)
t <- system.time(y <- mean(DT[DT$SEX == 1, ]$pwgtp15)) + system.time(mean(DT[DT$SEX ==
2, ]$pwgtp15))
check(y, t)
t <- system.time(y <- tapply(DT$pwgtp15, DT$SEX, mean))
check(y, t)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
biocLite("rhdf5")
installation.path()
installed.packages()
biocLite("rhdf5")
q()
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
setwd("~/GitHub/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
str(activity)
activity <- read.csv("activity.csv", colClasses = c("numeric", "Date", "numeric"))
str(activity)
sumByDate <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
str(sumByDate)
summary(sumByDate)
class(sumByDate)
View(activity)
View(sumByDate)
hist(sumByDate, col = heat.colors(8), xlab = "Total Steps by Date", main = "Histogram of Total Steps by Date")
meanByInterval <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
View(meanByInterval)
plot(row.names(meanByInterval), meanByInterval, type = "l", xlab = "Time intervals (in minutes)", ylab = "Average of Total Steps", main = "Time Series Plot of the Average of Total Steps in a Day")
max <- max(meanByInterval)
match(max,meanByInterval)
meanByInterval[104]
max_int <- match(max,meanByInterval)
meanByInterval[max_int]
sum(is.na(activity))
activityNAs <- activity[is.na(activity), ]
activityNoNAs <- activity[complete.cases(activity), ]
activityNAs$steps <- as.numeric(meanByInterval)
completedActivity <- rbind(activityNAs,activityNoNAs)
completedActivity <- completedActivity[order(completedActivity[ , 2], completedActivity[ , 3])]
completedActivity <- completedActivity[order(completedActivity[ , 2], completedActivity[ , 3]), ]
View(completedActivity)
completedsumByDate <- tapply(completedActivity$steps, completedActivity$date, sum)
hist(completedsumByDate, xlab = "Total Steps by Date", main = "Adjusted Histogram of Total Steps by Date (without missing values)")
summary(completedsumByDate)
days <- weekdays(completedActivity[ , 2])
completedActivity <- cbind(completedActivity, days)
library(plyr)
completedActivity$days <- revalue(completedActivity$days,c("Monday" = "Weekday", "Tuesday" = "Weekday","Wednesday" = "Weekday", "Thursday" = "Weekday", "Friday"="Weekday", "Saturday" = "Weekend", "Sunday"= "Weekend"))
View(completedActivity)
newMeanByInterval <- tapply(completedActivity$steps, list(completedActivity$interval, completedActivity$days), mean)
library(reshape2)
?melt
newMeanByInterval <- melt(newMeanByInterval)
colnames(newMeanByInterval) <- c("interval","day","steps")
library(lattice)
xyplot(newMeanByInterval$steps ~ newMeanByInterval$interval | newMeanByInterval$day, layout = c(1, 2), type = "l", main = "Time Series Plot of the Average of Total Steps (Weekday vs. Weekend)", xlab = "Time intervals (in minutes)", ylab = "Average of Total Steps")
